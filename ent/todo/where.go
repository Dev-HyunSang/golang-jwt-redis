// Code generated by ent, DO NOT EDIT.

package todo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dev-hyunsang/golang-jwt-redis/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TodoUUID applies equality check predicate on the "todo_uuid" field. It's identical to TodoUUIDEQ.
func TodoUUID(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoUUID), v))
	})
}

// UserUUID applies equality check predicate on the "user_uuid" field. It's identical to UserUUIDEQ.
func UserUUID(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUUID), v))
	})
}

// TodoTitle applies equality check predicate on the "todo_title" field. It's identical to TodoTitleEQ.
func TodoTitle(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoTitle), v))
	})
}

// TodoContext applies equality check predicate on the "todo_context" field. It's identical to TodoContextEQ.
func TodoContext(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoContext), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CratedAt applies equality check predicate on the "crated_at" field. It's identical to CratedAtEQ.
func CratedAt(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCratedAt), v))
	})
}

// TodoUUIDEQ applies the EQ predicate on the "todo_uuid" field.
func TodoUUIDEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDNEQ applies the NEQ predicate on the "todo_uuid" field.
func TodoUUIDNEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDIn applies the In predicate on the "todo_uuid" field.
func TodoUUIDIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTodoUUID), v...))
	})
}

// TodoUUIDNotIn applies the NotIn predicate on the "todo_uuid" field.
func TodoUUIDNotIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTodoUUID), v...))
	})
}

// TodoUUIDGT applies the GT predicate on the "todo_uuid" field.
func TodoUUIDGT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDGTE applies the GTE predicate on the "todo_uuid" field.
func TodoUUIDGTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDLT applies the LT predicate on the "todo_uuid" field.
func TodoUUIDLT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDLTE applies the LTE predicate on the "todo_uuid" field.
func TodoUUIDLTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTodoUUID), v))
	})
}

// UserUUIDEQ applies the EQ predicate on the "user_uuid" field.
func UserUUIDEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUUID), v))
	})
}

// UserUUIDNEQ applies the NEQ predicate on the "user_uuid" field.
func UserUUIDNEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserUUID), v))
	})
}

// UserUUIDIn applies the In predicate on the "user_uuid" field.
func UserUUIDIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserUUID), v...))
	})
}

// UserUUIDNotIn applies the NotIn predicate on the "user_uuid" field.
func UserUUIDNotIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserUUID), v...))
	})
}

// UserUUIDGT applies the GT predicate on the "user_uuid" field.
func UserUUIDGT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserUUID), v))
	})
}

// UserUUIDGTE applies the GTE predicate on the "user_uuid" field.
func UserUUIDGTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserUUID), v))
	})
}

// UserUUIDLT applies the LT predicate on the "user_uuid" field.
func UserUUIDLT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserUUID), v))
	})
}

// UserUUIDLTE applies the LTE predicate on the "user_uuid" field.
func UserUUIDLTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserUUID), v))
	})
}

// TodoTitleEQ applies the EQ predicate on the "todo_title" field.
func TodoTitleEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleNEQ applies the NEQ predicate on the "todo_title" field.
func TodoTitleNEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleIn applies the In predicate on the "todo_title" field.
func TodoTitleIn(vs ...string) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTodoTitle), v...))
	})
}

// TodoTitleNotIn applies the NotIn predicate on the "todo_title" field.
func TodoTitleNotIn(vs ...string) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTodoTitle), v...))
	})
}

// TodoTitleGT applies the GT predicate on the "todo_title" field.
func TodoTitleGT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleGTE applies the GTE predicate on the "todo_title" field.
func TodoTitleGTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleLT applies the LT predicate on the "todo_title" field.
func TodoTitleLT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleLTE applies the LTE predicate on the "todo_title" field.
func TodoTitleLTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleContains applies the Contains predicate on the "todo_title" field.
func TodoTitleContains(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleHasPrefix applies the HasPrefix predicate on the "todo_title" field.
func TodoTitleHasPrefix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleHasSuffix applies the HasSuffix predicate on the "todo_title" field.
func TodoTitleHasSuffix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleEqualFold applies the EqualFold predicate on the "todo_title" field.
func TodoTitleEqualFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTodoTitle), v))
	})
}

// TodoTitleContainsFold applies the ContainsFold predicate on the "todo_title" field.
func TodoTitleContainsFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTodoTitle), v))
	})
}

// TodoContextEQ applies the EQ predicate on the "todo_context" field.
func TodoContextEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoContext), v))
	})
}

// TodoContextNEQ applies the NEQ predicate on the "todo_context" field.
func TodoContextNEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTodoContext), v))
	})
}

// TodoContextIn applies the In predicate on the "todo_context" field.
func TodoContextIn(vs ...string) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTodoContext), v...))
	})
}

// TodoContextNotIn applies the NotIn predicate on the "todo_context" field.
func TodoContextNotIn(vs ...string) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTodoContext), v...))
	})
}

// TodoContextGT applies the GT predicate on the "todo_context" field.
func TodoContextGT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTodoContext), v))
	})
}

// TodoContextGTE applies the GTE predicate on the "todo_context" field.
func TodoContextGTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTodoContext), v))
	})
}

// TodoContextLT applies the LT predicate on the "todo_context" field.
func TodoContextLT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTodoContext), v))
	})
}

// TodoContextLTE applies the LTE predicate on the "todo_context" field.
func TodoContextLTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTodoContext), v))
	})
}

// TodoContextContains applies the Contains predicate on the "todo_context" field.
func TodoContextContains(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTodoContext), v))
	})
}

// TodoContextHasPrefix applies the HasPrefix predicate on the "todo_context" field.
func TodoContextHasPrefix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTodoContext), v))
	})
}

// TodoContextHasSuffix applies the HasSuffix predicate on the "todo_context" field.
func TodoContextHasSuffix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTodoContext), v))
	})
}

// TodoContextEqualFold applies the EqualFold predicate on the "todo_context" field.
func TodoContextEqualFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTodoContext), v))
	})
}

// TodoContextContainsFold applies the ContainsFold predicate on the "todo_context" field.
func TodoContextContainsFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTodoContext), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CratedAtEQ applies the EQ predicate on the "crated_at" field.
func CratedAtEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCratedAt), v))
	})
}

// CratedAtNEQ applies the NEQ predicate on the "crated_at" field.
func CratedAtNEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCratedAt), v))
	})
}

// CratedAtIn applies the In predicate on the "crated_at" field.
func CratedAtIn(vs ...time.Time) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCratedAt), v...))
	})
}

// CratedAtNotIn applies the NotIn predicate on the "crated_at" field.
func CratedAtNotIn(vs ...time.Time) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCratedAt), v...))
	})
}

// CratedAtGT applies the GT predicate on the "crated_at" field.
func CratedAtGT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCratedAt), v))
	})
}

// CratedAtGTE applies the GTE predicate on the "crated_at" field.
func CratedAtGTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCratedAt), v))
	})
}

// CratedAtLT applies the LT predicate on the "crated_at" field.
func CratedAtLT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCratedAt), v))
	})
}

// CratedAtLTE applies the LTE predicate on the "crated_at" field.
func CratedAtLTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCratedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		p(s.Not())
	})
}
